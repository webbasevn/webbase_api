<?php

namespace App\Exceptions;

use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\JsonResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        if ($e instanceof AuthenticationException) {
            return $this->shouldReturnJson($request, $e)
                ? response()->json(['message' => $e->getMessage(),'code'=> Response::HTTP_UNAUTHORIZED], Response::HTTP_UNAUTHORIZED)
                : redirect()->guest($e->redirectTo() ?? route('login'));
        }
        if ($e instanceof ModelNotFoundException) {
            return $this->sendError('Resource not found', Response::HTTP_NOT_FOUND);
        }
        if ($e instanceof HttpException) {
            return $this->sendError('Route not found', Response::HTTP_NOT_FOUND);
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

    public function sendError($message = null, $result = null, $code = Response::HTTP_INTERNAL_SERVER_ERROR)
    {
        $response = [
            'code' => $code,
            'data' => $result,
            'message' => $message,
        ];
        return response()->json($response, $code);
    }
}
